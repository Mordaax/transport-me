Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'\r\n    id 'com.google.gms.google-services'\r\n}\r\n\r\nandroid {\r\n    compileSdk 32\r\n\r\n    defaultConfig {\r\n        applicationId \"sg.edu.np.mad.transportme\"\r\n        minSdk 21\r\n        targetSdk 32\r\n        versionCode 17\r\n        versionName '2'\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables.useSupportLibrary = true\r\n        multiDexEnabled true\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    packagingOptions {\r\n        resources.excludes.add(\"META-INF/*\")\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.appcompat:appcompat:1.4.2'\r\n    implementation 'com.google.android.material:material:1.6.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'com.google.android.gms:play-services-maps:18.0.2'\r\n    implementation 'com.google.android.gms:play-services-vision:20.1.3'\r\n\r\n    implementation 'com.android.volley:volley:1.2.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.firebase:firebase-bom:30.1.0'\r\n    implementation 'com.google.gms:google-services:4.3.10'\r\n    implementation 'com.google.firebase:firebase-database:20.0.5'\r\n    implementation 'androidx.compose.ui:ui:1.1.1'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n\r\n    implementation 'it.sephiroth.android.library.imagezoom:imagezoom:2.3.0'\r\n    implementation 'io.github.imablanco:zoomy:1.0.0'\r\n    implementation 'com.jsibbold:zoomage:1.3.1'\r\n\r\n    implementation group: 'at.favre.lib', name: 'bcrypt', version: '0.9.0'\r\n    implementation \"androidx.swiperefreshlayout:swiperefreshlayout:1.1.0\"\r\n    implementation 'org.jsoup:jsoup:1.15.2'\r\n\r\n    implementation 'com.github.AnyChart:AnyChart-Android:1.1.2'\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n\r\n    implementation 'com.google.maps.android:android-maps-utils:2.3.0'\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 5dd8f17779b302ae3491a44436e3091462ab8a5d)
+++ b/app/build.gradle	(date 1659019400810)
@@ -11,8 +11,8 @@
         applicationId "sg.edu.np.mad.transportme"
         minSdk 21
         targetSdk 32
-        versionCode 17
-        versionName '2'
+        versionCode 18
+        versionName '2.01'
 
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
         vectorDrawables.useSupportLibrary = true
Index: app/src/main/java/sg/edu/np/mad/transportme/user/ProfileFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.transportme.user;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalEmail;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalFavouriteBusStop;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalName;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalCloseness;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalReminder;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalReminderBusService;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.grbsChange;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.SeekBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport at.favre.lib.crypto.bcrypt.BCrypt;\r\nimport sg.edu.np.mad.transportme.R;\r\n\r\nimport com.google.android.material.textfield.TextInputEditText;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\n/**\r\n * A simple {@link Fragment} subclass.\r\n * Use the {@link ProfileFragment#newInstance} factory method to\r\n * create an instance of this fragment.\r\n */\r\npublic class ProfileFragment extends Fragment {\r\n    FirebaseDatabase db = FirebaseDatabase.getInstance(\"https://transportme-c607f-default-rtdb.asia-southeast1.firebasedatabase.app/\");\r\n    // TODO: Rename parameter arguments, choose names that match\r\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\r\n    private static final String ARG_PARAM1 = \"param1\";\r\n    private static final String ARG_PARAM2 = \"param2\";\r\n\r\n    // TODO: Rename and change types of parameters\r\n    private String mParam1;\r\n    private String mParam2;\r\n\r\n    public ProfileFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    /**\r\n     * Use this factory method to create a new instance of\r\n     * this fragment using the provided parameters.\r\n     *\r\n     * @param param1 Parameter 1.\r\n     * @param param2 Parameter 2.\r\n     * @return A new instance of fragment ProfileFragment.\r\n     */\r\n    // TODO: Rename and change types and number of parameters\r\n    public static ProfileFragment newInstance(String param1, String param2) {\r\n        ProfileFragment fragment = new ProfileFragment();\r\n        Bundle args = new Bundle();\r\n        args.putString(ARG_PARAM1, param1);\r\n        args.putString(ARG_PARAM2, param2);\r\n        fragment.setArguments(args);\r\n        return fragment;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        if (getArguments() != null) {\r\n            mParam1 = getArguments().getString(ARG_PARAM1);\r\n            mParam2 = getArguments().getString(ARG_PARAM2);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        DatabaseReference reference;\r\n        reference = db.getReference(\"User\");\r\n        View rootView = inflater.inflate(R.layout.fragment_profile, container, false);\r\n        TextInputEditText username = rootView.findViewById(R.id.profileuserName);\r\n        TextInputEditText email = rootView.findViewById(R.id.profileuserEmail);\r\n        TextInputEditText password = rootView.findViewById(R.id.profileuserPassword);\r\n        SeekBar closenessSeekBar = rootView.findViewById(R.id.seekBar);\r\n        TextView closenessTextView = rootView.findViewById(R.id.closeness);\r\n        //allowing user to change the distance radius of bus stops around the user\r\n        String radiustext;\r\n        try{\r\n            radiustext = \"Bus Stop Radius (\"+ String.valueOf((int) (globalCloseness*1000)) +\" Meters)\";\r\n        } catch (Exception e) {\r\n            radiustext = \"Bus Stop Radius (300 Meters)\";\r\n            e.printStackTrace();\r\n        }\r\n        globalCloseness = Double.valueOf(300);\r\n        closenessTextView.setText(radiustext);\r\n        closenessSeekBar.setProgress((int) (globalCloseness*10));\r\n        closenessSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\r\n            @Override\r\n            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n                closenessTextView.setText(\"Bus Stop Radius (\"+ String.valueOf(i*100) +\" Meters)\");\r\n                Double doublei = Double.valueOf(i);\r\n                globalCloseness = doublei/10;\r\n                SharedPreferences.Editor editor = getActivity().getSharedPreferences(\"LoginData\", MODE_PRIVATE).edit();\r\n                editor.putString(\"closeness\", String.valueOf(globalCloseness));\r\n                editor.commit();\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onStartTrackingTouch(SeekBar seekBar) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onStopTrackingTouch(SeekBar seekBar) {\r\n\r\n            }\r\n        });\r\n        //filling up profile details\r\n        username.setText(globalName);\r\n        email.setText(globalEmail);\r\n        password.setText(\"CHANGE PASSWORD\");\r\n        //makes it such that when user clicks on edit textbox, textbox is not automatically filled with \"CHANGE PASSWORD\"\r\n        password.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View view, boolean b) {\r\n                if (b){\r\n                    password.setText(\"\");\r\n                }\r\n                else /*if(b == false && password.getEditableText().equals(\"\"))*/{\r\n                    if(!(password.getEditableText().length() > 0)){\r\n                        password.setText(\"CHANGE PASSWORD\");\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        Intent intent = new Intent(getActivity(), LoginPage.class);\r\n        Button signoutButton = rootView.findViewById(R.id.signoutbutton);\r\n\r\n        signoutButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view)\r\n            {\r\n                //signing user out and removing it from sharedpreferences\r\n                SharedPreferences.Editor editor = getActivity().getSharedPreferences(\"LoginData\", MODE_PRIVATE).edit();\r\n                editor.putString(\"name\", \"\");\r\n                editor.putString(\"email\", \"\");\r\n                editor.putString(\"login\",\"False\" );\r\n                editor.apply();\r\n                globalName = \"\";\r\n                globalEmail = \"\";\r\n                globalReminder = null;\r\n                globalReminderBusService = \"\";\r\n                grbsChange = new MutableLiveData<>();\r\n                LoginPage.SignedIn = false;\r\n                globalFavouriteBusStop.clear();\r\n                startActivity(intent); //user gets directed to login page after signing out\r\n            }\r\n        });\r\n        Button editProfile = rootView.findViewById(R.id.editProfile);\r\n        editProfile.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                String uEmail = email.getEditableText().toString();\r\n                String uPassw = password.getEditableText().toString();\r\n                if (!Patterns.EMAIL_ADDRESS.matcher(uEmail).matches()){ //checking for valid email address input\r\n                    email.setError(\"Invalid Email Address\");\r\n                    email.requestFocus();\r\n                    return;\r\n                }\r\n                if (uEmail.isEmpty()) {\r\n                    email.setError(\"Email is required\");\r\n                    email.requestFocus();\r\n                    return;\r\n                }\r\n                if (uPassw.length() < 6) {\r\n                    password.setError(\"Password should be at least 6 characters\");\r\n                    password.requestFocus();\r\n                    return;\r\n                }\r\n                if (uEmail == globalEmail) {\r\n                    Toast.makeText(getContext(), \"Nothing Changed\", Toast.LENGTH_SHORT).show();\r\n                    return;\r\n                }\r\n\r\n                AlertDialog.Builder confirmDataChange = new AlertDialog.Builder(getActivity());\r\n                confirmDataChange.setTitle(\"Confirm edit profile?\");\r\n                confirmDataChange.setMessage(\"Your data will be changed\");\r\n                confirmDataChange.setCancelable(true);\r\n                confirmDataChange.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        //reset information filled in edit textbox if user cancels profile edit\r\n                        email.setText(globalEmail);\r\n                        password.setText(\"\");\r\n                        return;\r\n                    }\r\n                });\r\n                confirmDataChange.setPositiveButton(\"Confirm\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                //checks to see if user changed their email\r\n                                if (!uEmail.equals(globalEmail)){\r\n                                    reference.child(globalName).child(\"email\").setValue(uEmail);\r\n                                    //saving changes in sharedpreferences so that changes are reflected when the user stays logged in\r\n                                    SharedPreferences.Editor editor = getActivity().getSharedPreferences(\"LoginData\", MODE_PRIVATE).edit();\r\n                                    globalEmail = uEmail;\r\n                                    editor.putString(\"email\", uEmail);\r\n                                    editor.commit();\r\n\r\n                                    Toast.makeText(getContext(), \"Email Changed\", Toast.LENGTH_SHORT).show();\r\n                                }\r\n                                //checks to see if user changed their hashed password\r\n                                if (!BCrypt.verifyer().verify(uPassw.toCharArray(), snapshot.child(globalName).child(\"password\").getValue().toString()).verified){\r\n                                    if (String.valueOf(password.getText()).equals(\"CHANGE PASSWORD\")){ //prevents user from accidentally making placeholder their password\r\n                                        Toast.makeText(getContext(), \"Password Not Changed\", Toast.LENGTH_SHORT).show();\r\n                                        return;\r\n                                    }\r\n                                    else{\r\n                                        reference.child(globalName).child(\"password\").setValue(BCrypt.withDefaults().hashToString(12, uPassw.toCharArray())); //changes password tied to user in database\r\n                                        Toast.makeText(getContext(), \"Password Changed\", Toast.LENGTH_SHORT).show(); //lets user know change has been made\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                AlertDialog alert = confirmDataChange.create();\r\n                alert.show();\r\n\r\n            }\r\n        });\r\n        return rootView;\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/transportme/user/ProfileFragment.java b/app/src/main/java/sg/edu/np/mad/transportme/user/ProfileFragment.java
--- a/app/src/main/java/sg/edu/np/mad/transportme/user/ProfileFragment.java	(revision 5dd8f17779b302ae3491a44436e3091462ab8a5d)
+++ b/app/src/main/java/sg/edu/np/mad/transportme/user/ProfileFragment.java	(date 1659100966454)
@@ -168,6 +168,7 @@
                 grbsChange = new MutableLiveData<>();
                 LoginPage.SignedIn = false;
                 globalFavouriteBusStop.clear();
+                getActivity().finish();
                 startActivity(intent); //user gets directed to login page after signing out
             }
         });
Index: app/src/main/java/sg/edu/np/mad/transportme/views/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.transportme.views;\r\n\r\nimport static android.Manifest.permission.ACCESS_COARSE_LOCATION;\r\nimport static android.content.Intent.FLAG_ACTIVITY_NO_ANIMATION;\r\nimport static android.graphics.BitmapFactory.decodeResource;\r\n\r\nimport static sg.edu.np.mad.transportme.BitmapResize.getResizedBitmap;\r\nimport static sg.edu.np.mad.transportme.ReminderApplication.CHANNEL_ID_2;\r\nimport static sg.edu.np.mad.transportme.ReminderService.reached;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalCloseness;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalName;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalRemindCloseness;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalReminder;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.globalReminderBusService;\r\nimport static sg.edu.np.mad.transportme.user.LoginPage.grbsChange;\r\nimport static sg.edu.np.mad.transportme.views.LoadingScreen.globalBusStops;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.AlertDialog;\r\nimport android.app.Notification;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.location.Criteria;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.os.Handler;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.util.SparseArray;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ScrollView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.gms.maps.CameraUpdate;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptor;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.LatLngBounds;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.maps.model.Polyline;\r\nimport com.google.android.gms.maps.model.PolylineOptions;\r\nimport com.google.android.gms.vision.Frame;\r\nimport com.google.android.gms.vision.text.TextBlock;\r\nimport com.google.android.gms.vision.text.TextRecognizer;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.maps.android.SphericalUtil;\r\n\r\nimport java.io.File;\r\nimport java.sql.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n\r\nimport sg.edu.np.mad.transportme.BusService;\r\nimport sg.edu.np.mad.transportme.BusStop;\r\nimport sg.edu.np.mad.transportme.BusStopAdapter;\r\nimport sg.edu.np.mad.transportme.BusStopDBHandler;\r\nimport sg.edu.np.mad.transportme.DistanceCalculator;\r\nimport sg.edu.np.mad.transportme.NextBus;\r\nimport sg.edu.np.mad.transportme.PrivacyPolicyActivty;\r\nimport sg.edu.np.mad.transportme.R;\r\nimport sg.edu.np.mad.transportme.ReminderService;\r\nimport sg.edu.np.mad.transportme.Route;\r\nimport sg.edu.np.mad.transportme.WeekActivity;\r\nimport sg.edu.np.mad.transportme.api.ApiBusStopService;\r\nimport sg.edu.np.mad.transportme.user.ProfileFragment;\r\n\r\n\r\npublic class MainActivity extends FragmentActivity implements OnMapReadyCallback, NavigationView.OnNavigationItemSelectedListener {\r\n    public static String networkprovider = LocationManager.NETWORK_PROVIDER;\r\n    public static ArrayList<Marker> mlistlocation;\r\n    LinearLayout mapandrv;\r\n    FrameLayout fragmentlayout;\r\n    LinearLayout reminderView;      //CHANGE TO SCROLLVIEW LATER\r\n    Button reminderButton;\r\n    Button cancelReminderButton;\r\n    LinearLayout noReminderLayout;\r\n    SwipeRefreshLayout swipeLayoutRemind;\r\n    ConstraintLayout remindInfoLayout;\r\n    GoogleMap map;\r\n    Uri image_uri;\r\n    LocationManager locationManager;\r\n    DrawerLayout drawerLayout;\r\n    FloatingActionButton cameraSearch;\r\n    SwipeRefreshLayout swipeRefreshLayout;\r\n    BottomNavigationView bottomNavigationView;\r\n    static final float END_SCALE = 0.7f;\r\n    ConstraintLayout contentView;\r\n    public static Boolean favourite = false;\r\n    private static final String[] LOCATION_PERMS = {\r\n            Manifest.permission.ACCESS_COARSE_LOCATION,\r\n            Manifest.permission.ACCESS_FINE_LOCATION\r\n    };\r\n    private static final int LOCATION_REQUEST = 1337;\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @SuppressLint(\"MissingPermission\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        if(globalBusStops.isEmpty()){\r\n            BusStopDBHandler busStopDBHandler = new BusStopDBHandler(MainActivity.this,null,null,1);\r\n            globalBusStops = busStopDBHandler.getBusStops();\r\n        }\r\n        swipeRefreshLayout = findViewById(R.id.swipeLayout);\r\n        ProgressDialog progressDialog = new ProgressDialog(MainActivity.this, R.style.MyAlertDialogStyle); //Show Loading icon when the user first loads\r\n        progressDialog.show();\r\n        progressDialog.setContentView(R.layout.progress_dialog);\r\n        progressDialog.getWindow().setBackgroundDrawableResource(\r\n                android.R.color.transparent\r\n        );\r\n\r\n        contentView = findViewById(R.id.content);\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        NavigationView navigationView = findViewById(R.id.nav_view);\r\n        ImageView menuIcon = findViewById(R.id.menu_icon);\r\n        navigationView.bringToFront();\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        navigationView.setCheckedItem(R.id.nav_home);\r\n\r\n        menuIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (drawerLayout.isDrawerVisible(GravityCompat.START)) {\r\n                    drawerLayout.closeDrawer(GravityCompat.START);\r\n                } else drawerLayout.openDrawer(GravityCompat.START);\r\n            }\r\n        });\r\n        animateNavigationDrawer();\r\n\r\n        cameraSearch = findViewById(R.id.fab);\r\n        cameraSearch.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n               /* Intent cameraIntent = new Intent(MainActivity.this, CameraSearch.class);\r\n                startActivity(cameraIntent);*/\r\n                selectImage();\r\n            }\r\n        });\r\n\r\n        FirebaseDatabase db = FirebaseDatabase.getInstance(\"https://transportme-c607f-default-rtdb.asia-southeast1.firebasedatabase.app/\");     //Initialise database instance\r\n        DatabaseReference reminderReference = db.getReference()\r\n                .child(\"User\")\r\n                //.child(firebaseUser.getUid())\r\n                .child(globalName)\r\n                .child(\"Reminder\");\r\n\r\n        mapandrv = findViewById(R.id.MapAndRV);\r\n        fragmentlayout = findViewById(R.id.frame_layout);\r\n        reminderView = findViewById(R.id.reminderView);\r\n        reminderButton = findViewById(R.id.reminderButton);\r\n        cancelReminderButton = findViewById(R.id.cancelReminderButton);\r\n        noReminderLayout = findViewById(R.id.noReminderLayout);\r\n        swipeLayoutRemind = findViewById(R.id.swipeLayoutRemind);\r\n        remindInfoLayout = findViewById(R.id.remindInfoLayout);\r\n        bottomNavigationView = findViewById(R.id.bottomNavigationView); // load botttom navigation bar\r\n        bottomNavigationView.setOnItemSelectedListener(item -> {\r\n\r\n            switch (item.getItemId()) {\r\n                case R.id.home:\r\n                    fragmentlayout.setVisibility(View.INVISIBLE); //Set fragment to invisible, show map and main recycler view to help with loading times\r\n                    reminderView.setVisibility(View.GONE);\r\n                    cameraSearch.setVisibility(View.VISIBLE);\r\n                    mapandrv.setVisibility(View.VISIBLE);\r\n                    swipeRefreshLayout.setVisibility(View.VISIBLE);\r\n                    favourite = false;\r\n                    break;\r\n                case R.id.favourites:\r\n                    mapandrv.setVisibility(View.INVISIBLE);\r\n                    cameraSearch.setVisibility(View.INVISIBLE);\r\n                    fragmentlayout.setVisibility(View.VISIBLE);\r\n                    replaceFragment(new FavouritesFragment());\r\n                    favourite = true;\r\n                    break;\r\n                case R.id.search:\r\n                    mapandrv.setVisibility(View.INVISIBLE);\r\n                    cameraSearch.setVisibility(View.INVISIBLE);\r\n                    fragmentlayout.setVisibility(View.VISIBLE);\r\n                    replaceFragment(new SearchFragment());\r\n                    break;\r\n                case R.id.mrtmap:\r\n                    mapandrv.setVisibility(View.INVISIBLE);\r\n                    cameraSearch.setVisibility(View.INVISIBLE);\r\n                    fragmentlayout.setVisibility(View.VISIBLE);\r\n                    replaceFragment(new MrtMapFragment());\r\n                    break;\r\n                case R.id.notify:\r\n                    reminderView.setVisibility(View.VISIBLE);\r\n                    mapandrv.setVisibility(View.VISIBLE);\r\n                    fragmentlayout.setVisibility(View.INVISIBLE);\r\n                    cameraSearch.setVisibility(View.INVISIBLE);\r\n                    swipeRefreshLayout.setVisibility(View.GONE);\r\n                    findViewById(R.id.busrouterecyclerView).setVisibility(View.GONE);\r\n                    if(globalReminder == null)\r\n                    {\r\n                        noReminderLayout.setVisibility(View.VISIBLE);\r\n                        swipeLayoutRemind.setVisibility(View.GONE);\r\n                        remindInfoLayout.setVisibility(View.GONE);\r\n                    } else {\r\n                        noReminderLayout.setVisibility(View.GONE);\r\n                        swipeLayoutRemind.setVisibility(View.VISIBLE);\r\n                        remindInfoLayout.setVisibility(View.VISIBLE);\r\n                    }\r\n                    break;\r\n                case R.id.nav_carpark:\r\n                    Intent intent = new Intent(MainActivity.this, CarparkActivity.class);\r\n                    startActivity(intent);\r\n                    break;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        Intent recievingEnd = getIntent();\r\n        String gotoprofile = recievingEnd.getStringExtra(\"Profile\");\r\n        if (gotoprofile != null) {\r\n            mapandrv.setVisibility(View.INVISIBLE);\r\n            fragmentlayout.setVisibility(View.VISIBLE);\r\n            replaceFragment(new ProfileFragment());\r\n            navigationView.setCheckedItem(R.id.nav_profile);\r\n            progressDialog.dismiss();\r\n        }\r\n\r\n        cancelReminderButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n            }\r\n        });\r\n\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.mrtmap);\r\n        mapFragment.getMapAsync(this);\r\n        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\r\n\r\n        ArrayList<BusStop> busStops = globalBusStops;\r\n\r\n        // If location permission is rejected, send toast message to user\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            final String[] LOCATION_PERMS = {\r\n                    Manifest.permission.ACCESS_COARSE_LOCATION,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION,\r\n                    Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                    Manifest.permission.CAMERA,\r\n                    Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n            };\r\n\r\n            final int LOCATION_REQUEST = 1337;\r\n\r\n            requestPermissions(LOCATION_PERMS, LOCATION_REQUEST);\r\n            Toast.makeText(MainActivity.this, \"Check Location and Connection Settings\", Toast.LENGTH_LONG).show();\r\n\r\n            return;\r\n        } else {\r\n\r\n            if (locationManager.isProviderEnabled(networkprovider)) { //Comments in this section is the same as the one in the LocationManager.NETWORK_PROVIDER\r\n                swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n                    @Override\r\n                    public void onRefresh() {\r\n                        locationManager.requestLocationUpdates(networkprovider, 60000, 10, new LocationListener() { //Every 60 seconds or 10m change, run code\r\n                            @Override\r\n                            public void onLocationChanged(@NonNull Location location) {\r\n                                Double Latitude = location.getLatitude(); //Get latitude and logitude\r\n                                Double Longitude = location.getLongitude();\r\n\r\n\r\n                                LatLng latLng = new LatLng(Latitude, Longitude);\r\n                                Geocoder geocoder = new Geocoder(getApplicationContext());\r\n\r\n\r\n                                ArrayList<BusStop> closeBusStops = new ArrayList<>();\r\n                                map.clear(); //Clear all existing markers on the map\r\n                                for (int i = 0; i < busStops.size(); i++) { //Get all bus stop given the radius\r\n                                    BusStop busStop = busStops.get(i);\r\n                                    busStop.setDistanceToLocation(DistanceCalculator.distanceBetween(busStop.getLatitude(), busStop.getLongitude(), Latitude, Longitude));\r\n\r\n                                    if (busStop.getDistanceToLocation() <= globalCloseness) {\r\n                                        closeBusStops.add(busStop);\r\n                                        LatLng latlongmarker = new LatLng(busStop.getLatitude(), busStop.getLongitude());\r\n                                        map.addMarker(new MarkerOptions().position(latlongmarker).title(busStop.getDescription()));\r\n                                    }\r\n                                }\r\n                                Collections.sort(closeBusStops);\r\n                                if (closeBusStops.size() > 0) { // If close bus stops > 0 run API and load recycler view\r\n                                    ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                                    apiBusStopService.getBusService(closeBusStops, new ApiBusStopService.VolleyResponseListener2() {\r\n                                        @Override\r\n                                        public void onError(String message) {\r\n                                            Toast.makeText(MainActivity.this, \"Cannot Get Bus Stops, Check Location and Connection\", Toast.LENGTH_LONG).show();\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onResponse(ArrayList<BusStop> busStopsLoaded) {\r\n\r\n                                            RecyclerView rv = findViewById(R.id.recyclerView); //Load recyclerview when they onresponse is recieved\r\n                                            BusStopAdapter adapter = new BusStopAdapter(busStopsLoaded, MainActivity.this);\r\n                                            LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                            rv.setAdapter(adapter);\r\n                                            rv.setLayoutManager(layout);\r\n                                            progressDialog.dismiss();\r\n                                        }\r\n                                    });\r\n                                }\r\n                                swipeRefreshLayout.setRefreshing(false); //Close refreshing Icon\r\n                                if (closeBusStops.size() == 0) { // If there are no nearby bus stop, show toast message\r\n                                    Toast.makeText(MainActivity.this, \"No nearby bus stops\", Toast.LENGTH_LONG).show();\r\n                                    map.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 16.2f));\r\n                                    progressDialog.dismiss();\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                swipeLayoutRemind.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n                    @Override\r\n                    public void onRefresh() {\r\n                        locationManager.requestLocationUpdates(networkprovider, 6000, 10, new LocationListener() {\r\n                            @Override\r\n                            public void onLocationChanged(@NonNull Location location) {\r\n                                if (globalReminder != null) {\r\n                                    Double Latitude = location.getLatitude(); //Get latitude and logitude\r\n                                    Double Longitude = location.getLongitude();\r\n\r\n\r\n                                    LatLng latLng = new LatLng(Latitude, Longitude);\r\n                                    Geocoder geocoder = new Geocoder(getApplicationContext());\r\n\r\n                                    ArrayList<BusStop> remindBusStop = new ArrayList<>();\r\n                                    remindBusStop.add(globalReminder);\r\n                                    RecyclerView rv = findViewById(R.id.recyclerViewRemind); //Load recyclerview when they onresponse is recieved\r\n                                    BusStopAdapter adapter = new BusStopAdapter(remindBusStop, MainActivity.this);\r\n                                    LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                    rv.setAdapter(adapter);\r\n                                    rv.setLayoutManager(layout);\r\n\r\n                                    LatLng destnLL = new LatLng(globalReminder.getLatitude(), globalReminder.getLongitude());\r\n                                    Double destnDist = SphericalUtil.computeDistanceBetween(latLng, destnLL);\r\n                                    TextView remindDestnDist = findViewById(R.id.remindDestnDist);\r\n                                    String display = String.format(\"%.2f\", destnDist / 1000) + \"km\\nLeft to \" + globalReminder.getDescription();\r\n                                    remindDestnDist.setText(display);\r\n\r\n                                    ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                                    apiBusStopService.getBusRoute(globalReminderBusService, new ApiBusStopService.VolleyResponseListener3() { //Call API for bus route\r\n                                        @Override\r\n                                        public void onError(String message) {\r\n                                            Toast.makeText(MainActivity.this, \"Cannot Get Bus Route, Check Location and Connection\", Toast.LENGTH_LONG).show();\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onResponse(ArrayList<BusStop> busStopRouteLoaded) {\r\n                                            Integer index = busStopRouteLoaded.lastIndexOf(globalReminder);\r\n                                            if (destnDist <= globalRemindCloseness) {\r\n                                                ArrayList<BusStop> busStopDist = new ArrayList<>();\r\n                                                for (BusStop bs : busStopRouteLoaded) {\r\n                                                    bs.setDistanceToLocation(SphericalUtil.computeDistanceBetween(latLng, new LatLng(bs.getLatitude(), bs.getLongitude())));\r\n                                                    busStopDist.add(bs);\r\n                                                }\r\n                                                Collections.sort(busStopDist);\r\n\r\n                                                Integer closestBusStopIndex = busStopRouteLoaded.indexOf(busStopDist.get(0));\r\n                                                if (index - closestBusStopIndex < 2) {\r\n                                                    Notification notification = new NotificationCompat.Builder(MainActivity.this, CHANNEL_ID_2)\r\n                                                            .setSmallIcon(R.drawable.app_logo_vector)\r\n                                                            .setContentTitle(\"Reminder to Alight\")\r\n                                                            .setContentText(\"You are arriving \" + globalReminder.getDescription() + \"!\")\r\n                                                            .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                                                            .setCategory(NotificationCompat.CATEGORY_MESSAGE)\r\n                                                            .build();\r\n\r\n                                                    NotificationManagerCompat notificationManager = NotificationManagerCompat.from(MainActivity.this);\r\n                                                    notificationManager.notify(1, notification);\r\n\r\n                                                    reminderReference.setValue(null);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                                swipeLayoutRemind.setRefreshing(false); //Close refreshing Icon\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // Main location request when the app first loads\r\n                locationManager.requestLocationUpdates(networkprovider, 60000, 10, new LocationListener() {\r\n                    @Override\r\n                    public void onLocationChanged(@NonNull Location location) {\r\n                        Double Latitude = location.getLatitude();\r\n                        Double Longitude = location.getLongitude();\r\n\r\n\r\n                        LatLng latLng = new LatLng(Latitude, Longitude);\r\n                        Geocoder geocoder = new Geocoder(getApplicationContext());\r\n\r\n                        if (globalReminder != null) {\r\n                            ArrayList<BusStop> remindBusStop = new ArrayList<>();\r\n                            remindBusStop.add(globalReminder);\r\n                            RecyclerView rv = findViewById(R.id.recyclerViewRemind); //Load recyclerview when they onresponse is recieved\r\n                            BusStopAdapter adapter = new BusStopAdapter(remindBusStop, MainActivity.this);\r\n                            LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                            rv.setAdapter(adapter);\r\n                            rv.setLayoutManager(layout);\r\n\r\n                            LatLng destnLL = new LatLng(globalReminder.getLatitude(), globalReminder.getLongitude());\r\n                            Double destnDist = SphericalUtil.computeDistanceBetween(latLng, destnLL);\r\n                            TextView remindDestnDist = findViewById(R.id.remindDestnDist);\r\n                            String display = String.format(\"%.2f\", destnDist / 1000) + \"km\\nLeft to \" + globalReminder.getDescription();\r\n                            remindDestnDist.setText(display);\r\n\r\n\r\n                            ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                            apiBusStopService.getBusRoute(globalReminderBusService, new ApiBusStopService.VolleyResponseListener3() { //Call API for bus route\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Toast.makeText(MainActivity.this, \"Cannot Get Bus Route, Check Location and Connection\", Toast.LENGTH_LONG).show();\r\n                                }\r\n\r\n                                @Override\r\n                                public void onResponse(ArrayList<BusStop> busStopRouteLoaded) {\r\n                                    Integer index = busStopRouteLoaded.lastIndexOf(globalReminder);\r\n\r\n                                    if (destnDist <= globalRemindCloseness) {\r\n                                        ArrayList<BusStop> busStopDist = new ArrayList<>();\r\n                                        for (BusStop bs : busStopRouteLoaded) {\r\n                                            bs.setDistanceToLocation(SphericalUtil.computeDistanceBetween(latLng, new LatLng(bs.getLatitude(), bs.getLongitude())));\r\n                                            busStopDist.add(bs);\r\n                                        }\r\n                                        Collections.sort(busStopDist);\r\n\r\n                                        Integer closestBusStopIndex = busStopRouteLoaded.indexOf(busStopDist.get(0));\r\n                                        if (index - closestBusStopIndex < 2 && reached != true) {\r\n                                            Notification notification = new NotificationCompat.Builder(MainActivity.this, CHANNEL_ID_2)\r\n                                                    .setSmallIcon(R.drawable.app_logo_vector)\r\n                                                    .setContentTitle(\"Reminder to Alight\")\r\n                                                    .setContentText(\"You are arriving \" + globalReminder.getDescription() + \"!\")\r\n                                                    .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                                                    .setCategory(NotificationCompat.CATEGORY_MESSAGE)\r\n                                                    .build();\r\n\r\n                                            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(MainActivity.this);\r\n                                            notificationManager.notify(1, notification);\r\n\r\n                                            reminderReference.setValue(null);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        ArrayList<BusStop> closeBusStops = new ArrayList<>();\r\n                        for (int i = 0; i < busStops.size(); i++) { //Get bus stops nearby\r\n                            BusStop busStop = busStops.get(i);\r\n                            busStop.setDistanceToLocation(DistanceCalculator.distanceBetween(busStop.getLatitude(), busStop.getLongitude(), Latitude, Longitude));\r\n\r\n                            if (busStop.getDistanceToLocation() <= globalCloseness) {\r\n                                closeBusStops.add(busStop);\r\n                                LatLng latlongmarker = new LatLng(busStop.getLatitude(), busStop.getLongitude());\r\n                                map.addMarker(new MarkerOptions().position(latlongmarker).title(busStop.getDescription()));\r\n                            }\r\n                        }\r\n                        Collections.sort(closeBusStops);\r\n                        if (closeBusStops.size() > 0) { //Call API if there nearby bus stops, if there arent, send toast message\r\n                            ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                            apiBusStopService.getBusService(closeBusStops, new ApiBusStopService.VolleyResponseListener2() { //call api to get bus services\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Toast.makeText(MainActivity.this, \"Cannot Get Bus Stops, Check Location and Connection\", Toast.LENGTH_LONG).show();\r\n                                }\r\n\r\n                                @Override\r\n                                public void onResponse(ArrayList<BusStop> busStopsLoaded) {\r\n\r\n                                    RecyclerView rv = findViewById(R.id.recyclerView); //Load recyclerview on response from API\r\n                                    BusStopAdapter adapter = new BusStopAdapter(busStopsLoaded, MainActivity.this);\r\n                                    LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                    rv.setAdapter(adapter);\r\n                                    rv.setLayoutManager(layout);\r\n                                    progressDialog.dismiss();\r\n                                }\r\n                            });\r\n                        }\r\n                        if (closeBusStops.size() == 0) {\r\n                            Toast.makeText(MainActivity.this, \"No nearby bus stops\", Toast.LENGTH_LONG).show();\r\n                            map.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 16.2f));\r\n                            progressDialog.dismiss();\r\n                        }\r\n\r\n\r\n                        map.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 16.2f)); //Move camera to here the user is\r\n\r\n                    }\r\n                });\r\n            } /*else if (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) { //This section is similar to the LocationManager.GPS_PROVIDER section above\r\n                //For users to refresh the recyclerview, runs the location reqeust updates\r\n                swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n                    @Override\r\n                    public void onRefresh() { //Whene user refresh run code\r\n                        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 60000, 10, new LocationListener() {\r\n                            @Override\r\n                            public void onLocationChanged(@NonNull Location location) {\r\n                                Double Latitude = location.getLatitude();\r\n                                Double Longitude = location.getLongitude();\r\n\r\n\r\n                                LatLng latLng = new LatLng(Latitude, Longitude);\r\n                                Geocoder geocoder = new Geocoder(getApplicationContext());\r\n\r\n\r\n                                ArrayList<BusStop> closeBusStops = new ArrayList<>();\r\n                                map.clear();\r\n                                for (int i = 0; i < busStops.size(); i++) {\r\n                                    BusStop busStop = busStops.get(i);\r\n                                    busStop.setDistanceToLocation(DistanceCalculator.distanceBetween(busStop.getLatitude(), busStop.getLongitude(), Latitude, Longitude));\r\n\r\n                                    if (busStop.getDistanceToLocation() <= globalCloseness) {\r\n                                        closeBusStops.add(busStop);\r\n                                        LatLng latlongmarker = new LatLng(busStop.getLatitude(), busStop.getLongitude());\r\n                                        map.addMarker(new MarkerOptions().position(latlongmarker).title(busStop.getDescription()));\r\n                                    }\r\n                                }\r\n                                Collections.sort(closeBusStops);\r\n                                if (closeBusStops.size() > 0) { // If close bus stops > 0 run API and load recycler view\r\n                                    ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                                    apiBusStopService.getBusService(closeBusStops, new ApiBusStopService.VolleyResponseListener2() {\r\n                                        @Override\r\n                                        public void onError(String message) {\r\n                                            Toast.makeText(MainActivity.this, \"Cannot Get Bus Stops, Check Location and Connection\", Toast.LENGTH_LONG).show();\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onResponse(ArrayList<BusStop> busStopsLoaded) {\r\n\r\n                                            RecyclerView rv = findViewById(R.id.recyclerView);\r\n                                            BusStopAdapter adapter = new BusStopAdapter(busStopsLoaded, MainActivity.this);\r\n                                            LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                            rv.setAdapter(adapter);\r\n                                            rv.setLayoutManager(layout);\r\n                                            progressDialog.dismiss();\r\n                                        }\r\n                                    });\r\n                                }\r\n                                swipeRefreshLayout.setRefreshing(false); //Close refreshing Icon\r\n                                if (closeBusStops.size() == 0) { // If there are no nearby bus stop, show toast message\r\n                                    Toast.makeText(MainActivity.this, \"No nearby bus stops\", Toast.LENGTH_LONG).show();\r\n                                    map.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 16.2f));\r\n                                    progressDialog.dismiss();\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                swipeLayoutRemind.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n                    @Override\r\n                    public void onRefresh() {\r\n                        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 6000, 10, new LocationListener() {\r\n                            @Override\r\n                            public void onLocationChanged(@NonNull Location location) {\r\n                                if (globalReminder != null)\r\n                                {\r\n                                    Double Latitude = location.getLatitude(); //Get latitude and logitude\r\n                                    Double Longitude = location.getLongitude();\r\n\r\n\r\n                                    LatLng latLng = new LatLng(Latitude, Longitude);\r\n                                    Geocoder geocoder = new Geocoder(getApplicationContext());\r\n\r\n\r\n                                    ArrayList<BusStop> remindBusStop = new ArrayList<>();\r\n                                    remindBusStop.add(globalReminder);\r\n                                    RecyclerView rv = findViewById(R.id.recyclerViewRemind); //Load recyclerview when they onresponse is recieved\r\n                                    BusStopAdapter adapter = new BusStopAdapter(remindBusStop, MainActivity.this);\r\n                                    LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                    rv.setAdapter(adapter);\r\n                                    rv.setLayoutManager(layout);\r\n\r\n                                    LatLng destnLL = new LatLng(globalReminder.getLatitude(),globalReminder.getLongitude());\r\n                                    Double destnDist = SphericalUtil.computeDistanceBetween(latLng,destnLL);\r\n                                    TextView remindDestnDist = findViewById(R.id.remindDestnDist);\r\n                                    String display = String.format(\"%.2f\", destnDist / 1000) + \"km\\nLeft to \" + globalReminder.getDescription();\r\n                                    remindDestnDist.setText(display);\r\n\r\n\r\n                                    ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                                    apiBusStopService.getBusRoute(globalReminderBusService,new ApiBusStopService.VolleyResponseListener3() { //Call API for bus route\r\n                                        @Override\r\n                                        public void onError(String message) {\r\n                                            Toast.makeText(MainActivity.this,\"Cannot Get Bus Route, Check Location and Connection\",Toast.LENGTH_LONG).show();\r\n                                        }\r\n                                        @Override\r\n                                        public void onResponse(ArrayList<BusStop> busStopRouteLoaded) {\r\n                                            Integer index = busStopRouteLoaded.lastIndexOf(globalReminder);\r\n                                            if(destnDist <= globalRemindCloseness)\r\n                                            {\r\n                                                ArrayList<BusStop> busStopDist = new ArrayList<>();\r\n                                                for (BusStop bs : busStopRouteLoaded)\r\n                                                {\r\n                                                    bs.setDistanceToLocation(SphericalUtil.computeDistanceBetween(latLng, new LatLng(bs.getLatitude(),bs.getLongitude())));\r\n                                                    busStopDist.add(bs);\r\n                                                }\r\n                                                Collections.sort(busStopDist);\r\n\r\n                                                Integer closestBusStopIndex = busStopRouteLoaded.indexOf(busStopDist.get(0));\r\n                                                if(index - closestBusStopIndex < 2)\r\n                                                {\r\n                                                    Notification notification = new NotificationCompat.Builder(MainActivity.this,CHANNEL_ID_2)\r\n                                                            .setSmallIcon(R.drawable.app_logo_vector)\r\n                                                            .setContentTitle(\"Reminder to Alight\")\r\n                                                            .setContentText(\"You are arriving \"+ globalReminder.getDescription() + \"!\")\r\n                                                            .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                                                            .setCategory(NotificationCompat.CATEGORY_MESSAGE)\r\n                                                            .build();\r\n\r\n                                                    NotificationManagerCompat notificationManager = NotificationManagerCompat.from(MainActivity.this);\r\n                                                    notificationManager.notify(1,notification);\r\n\r\n                                                    reminderReference.setValue(null);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                                swipeLayoutRemind.setRefreshing(false); //Close refreshing Icon\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                // Main location request when the app first loads\r\n                locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 60000, 10, new LocationListener() {\r\n                    @Override\r\n                    public void onLocationChanged(@NonNull Location location) {\r\n                        Double Latitude = location.getLatitude();\r\n                        Double Longitude = location.getLongitude();\r\n\r\n\r\n                        LatLng latLng = new LatLng(Latitude, Longitude);\r\n                        Geocoder geocoder = new Geocoder(getApplicationContext());\r\n\r\n                        if(globalReminder != null)\r\n                        {\r\n                            ArrayList<BusStop> remindBusStop = new ArrayList<>();\r\n                            remindBusStop.add(globalReminder);\r\n                            RecyclerView rv = findViewById(R.id.recyclerViewRemind); //Load recyclerview when they onresponse is recieved\r\n                            BusStopAdapter adapter = new BusStopAdapter(remindBusStop, MainActivity.this);\r\n                            LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                            rv.setAdapter(adapter);\r\n                            rv.setLayoutManager(layout);\r\n\r\n                            LatLng destnLL = new LatLng(globalReminder.getLatitude(),globalReminder.getLongitude());\r\n                            Double destnDist = SphericalUtil.computeDistanceBetween(latLng,destnLL);\r\n                            TextView remindDestnDist = findViewById(R.id.remindDestnDist);\r\n                            String display = String.format(\"%.2f\", destnDist / 1000) + \"km\\nLeft to \" + globalReminder.getDescription();\r\n                            remindDestnDist.setText(display);\r\n\r\n                            ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                            apiBusStopService.getBusRoute(globalReminderBusService,new ApiBusStopService.VolleyResponseListener3() { //Call API for bus route\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Toast.makeText(MainActivity.this,\"Cannot Get Bus Route, Check Location and Connection\",Toast.LENGTH_LONG).show();\r\n                                }\r\n                                @Override\r\n                                public void onResponse(ArrayList<BusStop> busStopRouteLoaded) {\r\n                                    Integer index = busStopRouteLoaded.lastIndexOf(globalReminder);\r\n                                    if(destnDist <= globalRemindCloseness)\r\n                                    {\r\n                                        ArrayList<BusStop> busStopDist = new ArrayList<>();\r\n                                        for (BusStop bs : busStopRouteLoaded)\r\n                                        {\r\n                                            bs.setDistanceToLocation(SphericalUtil.computeDistanceBetween(latLng, new LatLng(bs.getLatitude(),bs.getLongitude())));\r\n                                            busStopDist.add(bs);\r\n                                        }\r\n                                        Collections.sort(busStopDist);\r\n\r\n                                        Integer closestBusStopIndex = busStopRouteLoaded.indexOf(busStopDist.get(0));\r\n                                        if(index - closestBusStopIndex < 2)\r\n                                        {\r\n                                            Notification notification = new NotificationCompat.Builder(MainActivity.this,CHANNEL_ID_2)\r\n                                                    .setSmallIcon(R.drawable.app_logo_vector)\r\n                                                    .setContentTitle(\"Reminder to Alight\")\r\n                                                    .setContentText(\"You are arriving \"+ globalReminder.getDescription() + \"!\")\r\n                                                    .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                                                    .setCategory(NotificationCompat.CATEGORY_MESSAGE)\r\n                                                    .build();\r\n\r\n                                            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(MainActivity.this);\r\n                                            notificationManager.notify(1,notification);\r\n\r\n                                            reminderReference.setValue(null);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        ArrayList<BusStop> closeBusStops = new ArrayList<>();\r\n                        for (int i = 0; i < busStops.size(); i++) { //Get nearby bus stops\r\n                            BusStop busStop = busStops.get(i);\r\n                            busStop.setDistanceToLocation(DistanceCalculator.distanceBetween(busStop.getLatitude(), busStop.getLongitude(), Latitude, Longitude));\r\n\r\n                            if (busStop.getDistanceToLocation() <= globalCloseness) {\r\n                                closeBusStops.add(busStop);\r\n                                LatLng latlongmarker = new LatLng(busStop.getLatitude(), busStop.getLongitude());\r\n                                map.addMarker(new MarkerOptions().position(latlongmarker).title(busStop.getDescription()));\r\n                            }\r\n                        }\r\n                        Collections.sort(closeBusStops);\r\n                        if (closeBusStops.size() > 0) {\r\n                            ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                            apiBusStopService.getBusService(closeBusStops, new ApiBusStopService.VolleyResponseListener2() { //Call API for nearby bus stops\r\n                                @Override\r\n                                public void onError(String message) {\r\n                                    Toast.makeText(MainActivity.this, \"Cannot Get Bus Stops, Check Location and Connection\", Toast.LENGTH_LONG).show();\r\n                                }\r\n\r\n                                @Override\r\n                                public void onResponse(ArrayList<BusStop> busStopsLoaded) {\r\n\r\n                                    RecyclerView rv = findViewById(R.id.recyclerView);\r\n                                    BusStopAdapter adapter = new BusStopAdapter(busStopsLoaded, MainActivity.this);\r\n                                    LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                    rv.setAdapter(adapter);\r\n                                    rv.setLayoutManager(layout);\r\n                                    progressDialog.dismiss();\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                        if (closeBusStops.size() == 0) {\r\n                            Toast.makeText(MainActivity.this, \"No nearby bus stops\", Toast.LENGTH_LONG).show();\r\n                            map.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 16.2f));\r\n                            progressDialog.dismiss();\r\n                        }\r\n\r\n                        map.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 16.2f));\r\n\r\n                    }\r\n                });\r\n            }*/\r\n        }\r\n        grbsChange.observe(this, new Observer<String>() {\r\n            @Override\r\n            public void onChanged(String changedValue) {\r\n                reminderUpdate(reminderButton, findViewById(R.id.recyclerViewRemind));\r\n            }\r\n        });\r\n        new Handler().postDelayed(new Runnable() {      //Gives app time to load global variables from Login Page before setting value\r\n            @Override\r\n            public void run() {\r\n                grbsChange.setValue(globalReminderBusService);\r\n            }\r\n        }, 6500);\r\n        cancelReminderButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                swipeLayoutRemind.setVisibility(View.GONE);\r\n                remindInfoLayout.setVisibility(View.GONE);\r\n                noReminderLayout.setVisibility(View.VISIBLE);\r\n                reminderReference.setValue(null);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        if (globalReminder != null)\r\n        {\r\n            startReminderService();\r\n            reached = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        stopReminderService();\r\n        if (reached == true)\r\n        {\r\n            FirebaseDatabase db = FirebaseDatabase.getInstance(\"https://transportme-c607f-default-rtdb.asia-southeast1.firebasedatabase.app/\");     //Initialise database instance\r\n            DatabaseReference reminderReference = db.getReference()\r\n                    .child(\"User\")\r\n                    //.child(firebaseUser.getUid())\r\n                    .child(globalName)\r\n                    .child(\"Reminder\");\r\n            reminderReference.setValue(null);\r\n        }\r\n    }\r\n\r\n    public void startReminderService()\r\n    {\r\n        Intent serviceIntent = new Intent(this, ReminderService.class);\r\n        ContextCompat.startForegroundService(this, serviceIntent);\r\n    }\r\n\r\n    public void stopReminderService()\r\n    {\r\n        Intent serviceIntent = new Intent(this, ReminderService.class);\r\n        stopService(serviceIntent);\r\n    }\r\n\r\n    public void reminderUpdate(Button reminderButton, RecyclerView rv) {\r\n        if (!(globalReminder == null)) {\r\n            reminderButton.setText(\"Alight at \" + globalReminder.getDescription());\r\n            reminderButton.setVisibility(View.VISIBLE);\r\n        } else {\r\n            reminderButton.setVisibility(View.INVISIBLE);\r\n        }\r\n    }\r\n\r\n    public void moveMapsCamera(Double latitude, Double longitude) { //Function to enable move camera from other classes\r\n        LatLng latlongmove = new LatLng(latitude, longitude);\r\n        CameraPosition cameraPosition = new CameraPosition.Builder()\r\n                .target(latlongmove)\r\n                .zoom(17f)\r\n                .build();\r\n        CameraUpdate cu = CameraUpdateFactory.newCameraPosition(cameraPosition);\r\n        map.animateCamera(cu);\r\n\r\n    }\r\n\r\n    public void busrouteview(ArrayList<BusStop> busStopList) {\r\n        SwipeRefreshLayout orv = findViewById(R.id.swipeLayout);\r\n        RecyclerView rv = findViewById(R.id.busrouterecyclerView);\r\n        if (busStopList.size() > 0) {\r\n            BusStopAdapter adapter = new BusStopAdapter(busStopList, MainActivity.this);\r\n            LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n            rv.setAdapter(adapter);\r\n            rv.setLayoutManager(layout);\r\n            orv.setVisibility(View.GONE);\r\n            rv.setVisibility(View.VISIBLE);\r\n        }\r\n        fragmentlayout.setVisibility(View.INVISIBLE); //Set fragment to invisible, show map and main recycler view to help with loading times\r\n        reminderView.setVisibility(View.GONE);\r\n        cameraSearch.setVisibility(View.VISIBLE);\r\n        mapandrv.setVisibility(View.VISIBLE);\r\n        orv.setVisibility(View.GONE);\r\n        rv.setVisibility(View.VISIBLE);\r\n        /*swipeRefreshLayout.setVisibility(View.VISIBLE);*/\r\n        favourite = false;\r\n        bottomNavigationView.setSelectedItemId(R.id.nav_home);\r\n\r\n    }\r\n\r\n    public void busroute(Double latitude, Double longitude, BusStop currentStop, List<Marker> mList, List<LatLng> lList) {\r\n        LatLng latlongmarker = new LatLng(latitude, longitude);\r\n        Bitmap icon = Bitmap.createBitmap(15, 15, Bitmap.Config.ARGB_8888);\r\n        Drawable shape = getResources().getDrawable(R.drawable.marker_icon);\r\n        Canvas canvas = new Canvas(icon);\r\n        shape.setBounds(0, 0, icon.getWidth(), icon.getHeight());\r\n        shape.draw(canvas);\r\n        Marker marker = map.addMarker(new MarkerOptions().position(latlongmarker).title(currentStop.getDescription()).icon(BitmapDescriptorFactory.fromBitmap(icon)));\r\n        lList.add(latlongmarker);\r\n        mList.add(marker);\r\n    }\r\n\r\n    public Polyline polyline(List<LatLng> lList) {\r\n        Polyline polyline = map.addPolyline(new PolylineOptions().addAll(lList).color(Color.RED));\r\n        return polyline;\r\n    }\r\n\r\n    public void camerazoom(List<Marker> mList) {\r\n        LatLngBounds.Builder builder = new LatLngBounds.Builder();\r\n        for (Marker m : mList) {\r\n            builder.include(m.getPosition());\r\n        }\r\n        LatLngBounds bounds = builder.build();\r\n        CameraUpdate cu = CameraUpdateFactory.newLatLngBounds(bounds, 30);\r\n        map.animateCamera(cu);\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    public void removemarker(List<Marker> mList, Polyline line) {\r\n        if (line != null) {\r\n            line.remove();\r\n        }\r\n        for (Marker m : mList) {\r\n\r\n            m.remove();\r\n        }\r\n        SwipeRefreshLayout orv = findViewById(R.id.swipeLayout);\r\n        RecyclerView rv = findViewById(R.id.busrouterecyclerView);\r\n        rv.setVisibility(View.GONE);\r\n        orv.setVisibility(View.VISIBLE);\r\n        LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\r\n        Criteria criteria = new Criteria();\r\n        String provider = locationManager.getBestProvider(criteria, true);\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            final String[] LOCATION_PERMS = {\r\n                    Manifest.permission.ACCESS_COARSE_LOCATION,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION,\r\n                    Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                    Manifest.permission.CAMERA,\r\n                    Manifest.permission.WRITE_EXTERNAL_STORAGE\r\n            };\r\n\r\n            final int LOCATION_REQUEST = 1337;\r\n\r\n            requestPermissions(LOCATION_PERMS, LOCATION_REQUEST);\r\n            return;\r\n        }\r\n        Location location = locationManager.getLastKnownLocation(provider);\r\n        double latitude = location.getLatitude();\r\n        double longitude = location.getLongitude();\r\n        LatLng latLng = new LatLng(latitude, longitude);\r\n        CameraPosition cameraPosition = new CameraPosition.Builder()\r\n                .target(latLng)\r\n                .zoom(17f)\r\n                .build();\r\n        CameraUpdate cu = CameraUpdateFactory.newCameraPosition(cameraPosition);\r\n        map.animateCamera(cu);\r\n    }\r\n\r\n    private void replaceFragment(Fragment fragment) { //Replace fragment for nav bar\r\n        FragmentManager fragmentManager = getSupportFragmentManager();\r\n        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\r\n        fragmentTransaction.replace(R.id.frame_layout, fragment);\r\n        fragmentTransaction.commit();\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    public void onMapReady(@NonNull GoogleMap googleMap) {\r\n        map = googleMap;\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            final String[] LOCATION_PERMS = {\r\n                    Manifest.permission.ACCESS_COARSE_LOCATION,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION\r\n            };\r\n\r\n            final int LOCATION_REQUEST = 1337;\r\n\r\n            requestPermissions(LOCATION_PERMS, LOCATION_REQUEST);\r\n            return;\r\n        }\r\n        map.setMyLocationEnabled(true);\r\n\r\n    }\r\n\r\n    private void animateNavigationDrawer(){\r\n        /*drawerLayout.setScrimColor(getResources().getColor(com.google.android.material.R.color.));*/\r\n        drawerLayout.setScrimColor(Color.parseColor(\"#e8c490\"));\r\n        drawerLayout.addDrawerListener(new DrawerLayout.DrawerListener() {\r\n            @Override\r\n            public void onDrawerSlide(@NonNull View drawerView, float slideOffset) {\r\n                final float diffScaledOffset = slideOffset * (1 - END_SCALE);\r\n                final float offsetScale = 1 - diffScaledOffset;\r\n                contentView.setScaleX(offsetScale);\r\n                contentView.setScaleY(offsetScale);\r\n\r\n                final float xOffset = drawerView.getWidth() * slideOffset;\r\n                final float xOffsetDiff = contentView.getWidth() * diffScaledOffset / 2;\r\n                final float xTranslation = xOffset - xOffsetDiff;\r\n                contentView.setTranslationX(xTranslation);\r\n            }\r\n\r\n            @Override\r\n            public void onDrawerOpened(@NonNull View drawerView) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onDrawerClosed(@NonNull View drawerView) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onDrawerStateChanged(int newState) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        switch(item.getItemId()){\r\n            case R.id.nav_home:\r\n                fragmentlayout.setVisibility(View.INVISIBLE); //Set fragment to invisible, show map and main recycler view to help with loading times\r\n                mapandrv.setVisibility(View.VISIBLE);\r\n                favourite = false;\r\n                break;\r\n            case R.id.nav_carpark:\r\n                Intent intentcarpark = new Intent(MainActivity.this, CarparkActivity.class);\r\n                intentcarpark.addFlags(FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(intentcarpark);\r\n                break;\r\n            case R.id.nav_profile:\r\n                mapandrv.setVisibility(View.INVISIBLE);\r\n                fragmentlayout.setVisibility(View.VISIBLE);\r\n                replaceFragment(new ProfileFragment());\r\n                break;\r\n            case R.id.nav_route:\r\n                Intent routeintent = new Intent(MainActivity.this, Route.class);\r\n                routeintent.addFlags(FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(routeintent);\r\n                break;\r\n            case R.id.nav_fares:\r\n                Intent fareintent = new Intent(MainActivity.this, WeekActivity.class);\r\n                fareintent.addFlags(FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(fareintent);\r\n                break;\r\n            case R.id.nav_privacy:\r\n                Intent privacyintent = new Intent(MainActivity.this, PrivacyPolicyActivty.class);\r\n                privacyintent.addFlags(FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(privacyintent);\r\n                break;\r\n            case R.id.nav_rate:\r\n                Uri uri = Uri.parse(\"market://details?id=sg.edu.np.mad.transportme\");\r\n                Intent goToMarket = new Intent(Intent.ACTION_VIEW, uri);\r\n                // To count with Play market backstack, After pressing back button,\r\n                // to taken back to our application, we need to add following flags to intent.\r\n                goToMarket.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY |\r\n                        Intent.FLAG_ACTIVITY_NEW_DOCUMENT |\r\n                        Intent.FLAG_ACTIVITY_MULTIPLE_TASK);\r\n                try {\r\n                    startActivity(goToMarket);\r\n                } catch (ActivityNotFoundException e) {\r\n                startActivity(new Intent(Intent.ACTION_VIEW,\r\n                        Uri.parse(\"https://play.google.com/store/apps/details?id=sg.edu.np.mad.transportme\")));\r\n                break;\r\n            }\r\n            case R.id.nav_share:\r\n                Intent sendIntent = new Intent();\r\n                sendIntent.setAction(Intent.ACTION_SEND);\r\n                sendIntent.setType(\"text/plain\");\r\n                sendIntent.putExtra(Intent.EXTRA_TEXT, \"Download the Best Bus App In Singapore! \\n\\n https://play.google.com/store/apps/details?id=sg.edu.np.mad.transportme\");\r\n                startActivity(Intent.createChooser(sendIntent,\"Share With\"));\r\n                break;\r\n\r\n        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n    @Override\r\n    public void onBackPressed(){\r\n        if(drawerLayout.isDrawerVisible(GravityCompat.START)){\r\n            drawerLayout.closeDrawer(GravityCompat.START);\r\n        }else{\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n    public void addBusLocations(BusService currentService){\r\n        ArrayList<NextBus> nextbuses = currentService.getNextBuses();\r\n        mlistlocation = new ArrayList<>();\r\n\r\n        for (NextBus nextbus : nextbuses){\r\n            LatLng latlongbus = new LatLng(Double.valueOf(nextbus.getLatitude()), Double.valueOf(nextbus.getLongitude()));\r\n            MarkerOptions marker = new MarkerOptions().position(latlongbus).title(currentService.getServiceNumber());\r\n            Bitmap icon = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);\r\n            Drawable shape = getResources().getDrawable(R.drawable.ic_baseline_directions_bus_yellow_24);\r\n            Canvas canvas = new Canvas(icon);\r\n            shape.setBounds(0, 0, icon.getWidth(), icon.getHeight());\r\n            shape.draw(canvas);\r\n            Marker busmarker = map.addMarker(new MarkerOptions().position(latlongbus).title(currentService.getServiceNumber()).icon(BitmapDescriptorFactory.fromBitmap(icon)));\r\n            mlistlocation.add(busmarker);\r\n        }\r\n\r\n        map.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(Double.valueOf(nextbuses.get(0).getLatitude()), Double.valueOf(nextbuses.get(0).getLongitude())), 16.2f));\r\n    }\r\n    public static final int CAPTURE_IMAGE_FULLSIZE_ACTIVITY_REQUEST_CODE = 1777;\r\n    private void selectImage() {\r\n        final CharSequence[] options = {\"Choose from Gallery\",\"Cancel\" };\r\n        /*final CharSequence[] options = { \"Take Photo\", \"Choose from Gallery\",\"Cancel\" };*/\r\n        ImageView image = new ImageView(this);\r\n        image.setImageResource(R.drawable.bus_stop_next_to_pond);\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);\r\n        LayoutInflater inflater = LayoutInflater.from(this);\r\n        View view = inflater.inflate(R.layout.cameraalertdialog,null);\r\n        ImageView helloimage = view.findViewById(R.id.busstopimageview);\r\n        helloimage.setImageResource(R.drawable.bus_stop_next_to_pond);\r\n\r\n        Button selectImageButton = view.findViewById(R.id.buttonselectimage);\r\n        Button cancelImageButton = view.findViewById(R.id.buttoncancel);\r\n        AlertDialog alertDialog = new AlertDialog.Builder(this).setView(view).create();\r\n\r\n        selectImageButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent pickPhoto = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n                startActivityForResult(pickPhoto , 1);\r\n                alertDialog.cancel();\r\n            }\r\n        });\r\n        cancelImageButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                alertDialog.cancel();\r\n            }\r\n        });\r\n\r\n        alertDialog.show();\r\n        /*builder.setTitle(\"Choose Image to Scan\");\r\n        builder.setIcon(R.drawable.appsplashicon);\r\n        builder.setView(image);\r\n        builder.setItems(options, new DialogInterface.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int item) {\r\n\r\n                if (options[item].equals(\"Take Photo\")) {\r\n                    ContentValues values = new ContentValues();\r\n                    values.put(MediaStore.Images.Media.TITLE, \"New Picture\");\r\n                    values.put(MediaStore.Images.Media.DESCRIPTION, \"From the Camera\");\r\n                    image_uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);\r\n                    Log.d(\"Hell\", image_uri.toString());\r\n                    Intent takePicture = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);\r\n                    *//*Intent takePicture = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);*//*\r\n                    File file = new File(Environment.getExternalStorageDirectory()+File.separator + \"image.jpg\");\r\n                    takePicture.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\r\n                    startActivityForResult(takePicture, CAPTURE_IMAGE_FULLSIZE_ACTIVITY_REQUEST_CODE);\r\n                    *//*takePicture.putExtra(MediaStore.EXTRA_OUTPUT, image_uri);*//*\r\n                    *//*startActivityForResult(takePicture,0);*//*\r\n\r\n                } else if (options[item].equals(\"Choose from Gallery\")) {\r\n                    Intent pickPhoto = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n                    startActivityForResult(pickPhoto , 1);\r\n\r\n                } else if (options[item].equals(\"Cancel\")) {\r\n                    dialog.dismiss();\r\n                }\r\n            }\r\n        });\r\n        builder.show();*/\r\n    }\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode != RESULT_CANCELED) {\r\n            switch (requestCode) {\r\n                case 0:\r\n                    if (resultCode == RESULT_OK /*&& data != null*/) {\r\n                        if (requestCode == CAPTURE_IMAGE_FULLSIZE_ACTIVITY_REQUEST_CODE)\r\n                        {\r\n                            //Get our saved file into a bitmap object:\r\n\r\n                            File file = new File(Environment.getExternalStorageDirectory()+File.separator +\r\n                                    \"image.jpg\");\r\n                            Bitmap bitmap = decodeSampledBitmapFromFile(file.getAbsolutePath(), 1000, 700);\r\n                            TextRecognizer textRecognizer = new TextRecognizer.Builder(this).build();\r\n                            Frame frameImage = new Frame.Builder().setBitmap(bitmap).build();\r\n                            SparseArray<TextBlock> textBlockSpaceArray = textRecognizer.detect(frameImage);\r\n                        }\r\n                        /*try{\r\n                            Bitmap b = (Bitmap)data.getExtras().get(\"data\");\r\n                            Log.d(\"Hell\", b.toString());\r\n\r\n                            ArrayList<BusStop> cameraBusStops = new ArrayList<>();\r\n                            Bitmap selectedImage = MediaStore.Images.Media.getBitmap(this.getContentResolver(), image_uri);\r\n                            *//*Bitmap selectedImage = (Bitmap) data.getExtras().get(\"data\");*//*\r\n                            selectedImage = getResizedBitmap(selectedImage,1000);\r\n                            TextRecognizer textRecognizer = new TextRecognizer.Builder(this).build();\r\n                            Frame frameImage = new Frame.Builder().setBitmap(b).build();\r\n                            SparseArray<TextBlock> textBlockSpaceArray = textRecognizer.detect(frameImage);\r\n\r\n\r\n                            for (int i =0; i<textBlockSpaceArray.size();i++){\r\n                                TextBlock textBlock = textBlockSpaceArray.get(textBlockSpaceArray.keyAt(i));\r\n                                Log.d(\"Hello\",textBlock.getValue());\r\n                                for (int x=0; i< globalBusStops.size(); i++){\r\n                                    BusStop currentStop = globalBusStops.get(i);\r\n                                    if (textBlock.getValue().equalsIgnoreCase(currentStop.getDescription()) ||\r\n                                            textBlock.getValue().equals(currentStop.getBusStopCode()) ||\r\n                                            textBlock.getValue().equalsIgnoreCase(currentStop.getRoadName())){\r\n                                        cameraBusStops.add(currentStop);\r\n                                        LatLng latlongmarker = new LatLng(currentStop.getLatitude(), currentStop.getLongitude());\r\n                                        map.addMarker(new MarkerOptions().position(latlongmarker).title(currentStop.getDescription()));\r\n                                        map.moveCamera(CameraUpdateFactory.newLatLngZoom(latlongmarker, 16.2f));\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                            if(cameraBusStops.size() > 0){\r\n                                Toast.makeText(MainActivity.this,\"Bus Stop Recognized, loading Bus Stop\",Toast.LENGTH_LONG).show();\r\n                                ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                                apiBusStopService.getBusService(cameraBusStops,new ApiBusStopService.VolleyResponseListener2() { //Call API for nearby bus stops\r\n                                    @Override\r\n                                    public void onError(String message) {\r\n                                        Toast.makeText(MainActivity.this,\"Cannot Get Bus Stop, Check Location and Connection Settings\",Toast.LENGTH_LONG).show();\r\n                                    }\r\n                                    @Override\r\n                                    public void onResponse(ArrayList<BusStop> busStopsLoaded) {\r\n                                        RecyclerView rv = findViewById(R.id.recyclerView);\r\n                                        BusStopAdapter adapter = new BusStopAdapter(busStopsLoaded,MainActivity.this);\r\n                                        LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                        rv.setAdapter(adapter);\r\n                                        rv.setLayoutManager(layout);\r\n                                    }\r\n                                });\r\n                            }\r\n                            else{\r\n                                Toast.makeText(MainActivity.this,\"Cannot Recognize Text Choose Another Photo\",Toast.LENGTH_LONG).show();\r\n\r\n                            }\r\n\r\n                        }\r\n                        catch(Exception e){\r\n                        }*/\r\n\r\n                    }\r\n\r\n                    break;\r\n                case 1:\r\n                    if (resultCode == RESULT_OK && data != null) {\r\n                        Uri selectedImage = data.getData();\r\n                        String[] filePathColumn = {MediaStore.Images.Media.DATA};\r\n\r\n                        if (selectedImage != null) {\r\n                            Cursor cursor = getContentResolver().query(selectedImage,\r\n                                    filePathColumn, null, null, null);\r\n                            if (cursor != null) {\r\n                                cursor.moveToFirst();\r\n\r\n                                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);\r\n                                String picturePath = cursor.getString(columnIndex);\r\n                                Bitmap selectedPhoneImage = BitmapFactory.decodeFile(picturePath);\r\n\r\n                                try{\r\n                                    ArrayList<BusStop> cameraBusStops = new ArrayList<>();\r\n                                    TextRecognizer textRecognizer = new TextRecognizer.Builder(this).build();\r\n                                    Frame frameImage = new Frame.Builder().setBitmap(selectedPhoneImage).build();\r\n                                    SparseArray<TextBlock> textBlockSpaceArray = textRecognizer.detect(frameImage);\r\n                                    for (int i =0; i<textBlockSpaceArray.size();i++){\r\n                                        TextBlock textBlock = textBlockSpaceArray.get(textBlockSpaceArray.keyAt(i));\r\n                                        for (int x=0; i< globalBusStops.size(); i++){\r\n                                            BusStop currentStop = globalBusStops.get(i);\r\n                                            if (textBlock.getValue().equalsIgnoreCase(currentStop.getDescription()) ||\r\n                                                    textBlock.getValue().equals(currentStop.getBusStopCode()) ||\r\n                                                    textBlock.getValue().equalsIgnoreCase(currentStop.getRoadName())){\r\n                                                cameraBusStops.add(currentStop);\r\n                                                LatLng latlongmarker = new LatLng(currentStop.getLatitude(), currentStop.getLongitude());\r\n                                                map.addMarker(new MarkerOptions().position(latlongmarker).title(currentStop.getDescription()));\r\n                                                map.moveCamera(CameraUpdateFactory.newLatLngZoom(latlongmarker, 16.2f));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if(cameraBusStops.size() > 0){\r\n                                        Toast.makeText(MainActivity.this,\"Bus Stop Recognized, loading Bus Stop\",Toast.LENGTH_LONG).show();\r\n                                        ApiBusStopService apiBusStopService = new ApiBusStopService(MainActivity.this);\r\n                                        apiBusStopService.getBusService(cameraBusStops,new ApiBusStopService.VolleyResponseListener2() { //Call API for nearby bus stops\r\n                                            @Override\r\n                                            public void onError(String message) {\r\n                                                Toast.makeText(MainActivity.this,\"Cannot Get Bus Stop, Check Location and Connection Settings\",Toast.LENGTH_LONG).show();\r\n                                            }\r\n                                            @Override\r\n                                            public void onResponse(ArrayList<BusStop> busStopsLoaded) {\r\n                                                RecyclerView rv = findViewById(R.id.recyclerView);\r\n                                                BusStopAdapter adapter = new BusStopAdapter(busStopsLoaded,MainActivity.this);\r\n                                                LinearLayoutManager layout = new LinearLayoutManager(MainActivity.this);\r\n                                                rv.setAdapter(adapter);\r\n                                                rv.setLayoutManager(layout);\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else{\r\n                                        Toast.makeText(MainActivity.this,\"Cannot Recognize Text Choose Another Photo\",Toast.LENGTH_LONG).show();\r\n\r\n                                    }\r\n\r\n                                }\r\n                                catch(Exception e){\r\n                                    Log.d(\"HAHA\", \"failed\");\r\n                                }\r\n                                cursor.close();\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    private BitmapDescriptor bitmapDescriptorFromVector(Context context, int vectorResId) {\r\n        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);\r\n        vectorDrawable.setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());\r\n        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(bitmap);\r\n        vectorDrawable.draw(canvas);\r\n        return BitmapDescriptorFactory.fromBitmap(bitmap);\r\n    }\r\n    public static Bitmap decodeSampledBitmapFromFile(String path, int reqWidth, int reqHeight)\r\n    { // BEST QUALITY MATCH\r\n\r\n        //First decode with inJustDecodeBounds=true to check dimensions\r\n        final BitmapFactory.Options options = new BitmapFactory.Options();\r\n        options.inJustDecodeBounds = true;\r\n        BitmapFactory.decodeFile(path, options);\r\n\r\n        // Calculate inSampleSize, Raw height and width of image\r\n        final int height = options.outHeight;\r\n        final int width = options.outWidth;\r\n        options.inPreferredConfig = Bitmap.Config.RGB_565;\r\n        int inSampleSize = 1;\r\n\r\n        if (height > reqHeight)\r\n        {\r\n            inSampleSize = Math.round((float)height / (float)reqHeight);\r\n        }\r\n        int expectedWidth = width / inSampleSize;\r\n\r\n        if (expectedWidth > reqWidth)\r\n        {\r\n            //if(Math.round((float)width / (float)reqWidth) > inSampleSize) // If bigger SampSize..\r\n            inSampleSize = Math.round((float)width / (float)reqWidth);\r\n        }\r\n\r\n        options.inSampleSize = inSampleSize;\r\n\r\n        // Decode bitmap with inSampleSize set\r\n        options.inJustDecodeBounds = false;\r\n\r\n        return BitmapFactory.decodeFile(path, options);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/transportme/views/MainActivity.java b/app/src/main/java/sg/edu/np/mad/transportme/views/MainActivity.java
--- a/app/src/main/java/sg/edu/np/mad/transportme/views/MainActivity.java	(revision 5dd8f17779b302ae3491a44436e3091462ab8a5d)
+++ b/app/src/main/java/sg/edu/np/mad/transportme/views/MainActivity.java	(date 1659104625297)
@@ -125,7 +125,7 @@
 
 
 public class MainActivity extends FragmentActivity implements OnMapReadyCallback, NavigationView.OnNavigationItemSelectedListener {
-    public static String networkprovider = LocationManager.NETWORK_PROVIDER;
+    public static String networkprovider = LocationManager.GPS_PROVIDER;
     public static ArrayList<Marker> mlistlocation;
     LinearLayout mapandrv;
     FrameLayout fragmentlayout;
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\cyrus\\.android\\avd\\Pixel_4_API_30.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2022-07-28T11:51:00.579870300Z\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 5dd8f17779b302ae3491a44436e3091462ab8a5d)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1659104645082)
@@ -12,6 +12,6 @@
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-07-28T11:51:00.579870300Z" />
+    <timeTargetWasSelectedWithDropDown value="2022-07-29T14:23:43.552487300Z" />
   </component>
 </project>
\ No newline at end of file
Index: app/release/output-metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 3,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"sg.edu.np.mad.transportme\",\r\n  \"variantName\": \"release\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"attributes\": [],\r\n      \"versionCode\": 15,\r\n      \"versionName\": \"1.1.3\",\r\n      \"outputFile\": \"app-release.apk\"\r\n    }\r\n  ],\r\n  \"elementType\": \"File\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/release/output-metadata.json b/app/release/output-metadata.json
--- a/app/release/output-metadata.json	(revision 5dd8f17779b302ae3491a44436e3091462ab8a5d)
+++ b/app/release/output-metadata.json	(date 1659020026452)
@@ -11,8 +11,8 @@
       "type": "SINGLE",
       "filters": [],
       "attributes": [],
-      "versionCode": 15,
-      "versionName": "1.1.3",
+      "versionCode": 18,
+      "versionName": "2.01",
       "outputFile": "app-release.apk"
     }
   ],
